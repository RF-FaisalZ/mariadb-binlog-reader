import os
import re
import glob
import sys
import string

#Function to return a distinct list removing duplicates
def distinct(aList):
  return list(dict.fromkeys(aList))

#Counts the individual items in the array and generate a summary list
def countElements(aList):
    DistinctItems = distinct(aList)
    Report = []
    for Item in DistinctItems:
        Report.append(Item + "," + str(aList.count(Item)))

    Report.sort()
    return Report

def printReport(aList):
    print("\n*********** Start of the Binary Log Report ***************")
    for Line in aList:
        print(Line)

    print("*********** End of the Binary Log Report ***************\n")

#Main Module
def main():
    #Makes sure all three parameters are provided!
    if (len(sys.argv) < 4):
        print ("Please specify the Binary Log Path, Bin Log filename and starting log file name")
        print ("\nExample:")
        print ("shell> python binlogreader.py /var/lib/mysql mariadb-bin 0")
        print ("\nThe above looks at the: \n\t/var/lib/mysql folder for binary logs\n\tmariadb-bin as the binlog file naming convention\n\t0 as the starting binary log file name\n\n")
        return

    try:
        Path = sys.argv[1]
        BinLogFileName = sys.argv[2]
        StartPosition = int(sys.argv[3])
    except:
        Path = '/var/lib/mysql'
        BinLogFileName = "mariadb-bin"
        StartPosition = 0

    FullBinLogPath = Path + '/' + BinLogFileName;

    Files = []

    Files = glob.glob(FullBinLogPath + '.*')
    Files.remove(FullBinLogPath + '.index')

    # Sort the filenames
    Files.sort();

    os.system('>./binlog.out');

    #Process the files
    print("\n*********** Reading Binary Logs ***********")

    for BinLogFile in Files:
        try:
           BinLogNumber = int(os.path.splitext(BinLogFile)[1].replace('.', '0'))
           if (BinLogNumber >= StartPosition):
               BinLogCmd = 'mysqlbinlog -v ' + BinLogFile + ' >> ./binlog.out'
               print(BinLogCmd)
               os.system(BinLogCmd)
           else:
               print("Skipping binlog file " + str(BinLogNumber))
        except:
            print(BinLogFile + ' is not a BinLog file...')

    print("*********** Finished Reading Binary Logs ***********\n")

    #Open the extracted Binlogs file and start parsing
    try:
        ExtractedBinlog = open("./binlog.out", "r")
        LogLines = ExtractedBinlog.readlines()
    except:
        print("Unable to read the extracted binary log file!")

    #Stores various action items
    TransList=[]

    #Parse the Binlog Output
    for LogLine in LogLines:
        #This will remove all white spaces including tabs etc and make the string properly formatted with a single space
        LogLine = " ".join(LogLine.upper().split())

        if ('### INSERT INTO ' in LogLine or '### UPDATE ' in LogLine or '### DELETE ' in LogLine):
            TransList.append(LogLine.replace('### ', ''))

        if ('CREATE TABLE' in LogLine):
            #Identify the Create Table text up to "(" and ignore the rest of the text
            if ("(" in LogLine):
                TransList.append(LogLine.split("(")[0])
            else:
                TransList.append(LogLine)

        #Record the Drop Table command and remove all additional text like server's comments
        if ('DROP TABLE' in LogLine):
            TransList.append(LogLine.replace(' /* GENERATED BY SERVER */', ''))

    #Print the formatted report from the binary logs!
    printReport(countElements(TransList))

if __name__== "__main__":
  main()
